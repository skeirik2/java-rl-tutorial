/**
 *
 * This is a bugfix of the grammar written by Sriram Sankar for Java 1.1,
 * modified by David Williamns for Java 1.2, by Andrea Gini for Java 1.4
 * and finally by Marco Savard to include a missing construct.
 *
 * According wiht the Java Language Sytax Specification, rules Classbody,
 * ClassBodyDeclarations, InterfaceBody and InterfaceBodyDeclarations, you
 * can put any number of semicolon between any production you can find
 * inside a class or an interface. These extra semicolons must be treated
 * in a different way from semicolons that concludes some production
 * (like abstract method declarations or field declarations), because the
 * latter are mandatory. So I removed the modification previously added
 * by Marco Savard to the production FieldDeclaration() (duplication of ";")
 * and added ";" as an optional derivation inside ClassBodyDeclaration() and
 * InterfaceBodyDeclaration(), in a way that mimic the official 
 * Java Grammar, that can be found at the following adress:
 * http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html 
 *
 * As an informal proof of correctness, now this grammar accepts all the 3887
 * files of the JDK1.4 API.
 *
 * Thanks to Marco Savard for having pointed out the problem.
 *
 * To track changes, search for the string "// added by Andrea Gini2"
 *
 * Andrea Gini, 05/05/2002
 * ginian@tiscali.it
 *
 *====================================================================
 *
 * According the point #19 of the java 1.2 compatibility document of Sun
 * (http://java.sun.com/products/jdk/1.2/compatibility.html), the following
 * construct is valid since java 1.2 : 
 * 
 * class D extends C {
 *   void f() {
 *   // overrides f() to run it in a new thread
 *       new Thread(new Runnable() {
 *           public void run() {
 *	        D.super.f();
 *	    }
 *	 }).start();
 *    }
 * }
 *
 * Unfortunely, this was not supported by the previous grammar. So 
 * I have adapted the grammar in order to support it. 
 *
 * To track changes, search for the string "Modified by Marco Savard"
 *
 * Marco Savard, 28/03/2002
 * marco.savard@magna-solutions.de
 *
 * ==================================================================
 *
 * This is a modified version of the grammar written by Sriram Sankar for Java 1.1
 * and modified by David Williamns for Java 1.2. It has been modified to accept Java
 * sources for Java 1.4. The grammar have been modified in four parts: <br> 
 * 1) 'assert' has been included to the keyword list<br>
 * 2) AssertStatement() production has been added<br>
 * 3) the production Statement() has been modified in order to support AssertStatement()<br>
 * 4) in the main the string "for Java1.2 code" has been changed with "for Java1.4 code"<br>
 *
 * To track changes, search for the string "// added by Andrea Gini"
 *
 * Andrea Gini, 24/02/2002
 * ginian@tiscali.it
 *
 * ==================================================================
 *
 * This file is a modified version of one originally found in the
 * JavaGrammars Examples directory of JavaCC1_1. It has been
 * modified to accept Java source code for Java 1.2. Basically,
 * this means a new key word was added, 'strictfp', and that keyword
 * added to the appropriate productions and LOOKAHEADs (where other,
 * similar keywords are listed as possible choices). This involved
 * changing 11 lines.
 *
 * Minor changes were also made to the main program for testing.
 *
 * The goal of this effort was for the grammar to be able to parse
 * any legal Java 1.2 source code. It does not reject all illegal
 * cases, but neither did the original. Plus, when it comes to
 * the new 'strictfp' keyword, the Java Compiler from Sun (JDK1.2.1)
 * also does not reject all illegal cases, as defined by the
 * "Updates" document found at
 *       http://java.sun.com/docs/books/jls/strictfp-changes.pdf
 * (see the testcases.txt file for details).
 *
 * David Williams, 7/99
 * ===================================================================
 *
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 *
 * This file contains a Java grammar and actions that implement a front-end.
 *
 */

options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(JavaWrapper)
package javarl;
import java.util.ArrayList;
import java.io.*;

public class JavaWrapper
{
	static ArrayList classes;
	static int ln;
	static String packageName;
	static String imports;
	
	static void init(){
		classes = new ArrayList();
		ln = 0;
		packageName = "";
		imports = "";
	}

	static String addTokens (Token t){
		String modifier = "";
		boolean flag = false;
		boolean visibleMod = false;
		while (t.image.compareTo(getToken(1).image) != 0) {
			if ((t.image.compareTo("private") == 0)|| (t.image.compareTo("public")==0) || (t.image.compareTo("protected") == 0))
				visibleMod = true;
			if (! flag){
				flag = true;
				modifier = t.image;
			} else {
				modifier = "__(" + modifier + ","+ t.image + ")";
			}
  			t = t.next;
  		}
  		if (! visibleMod){
  			if (modifier.length() > 0){
  				modifier = "__(" + modifier + ",default)";
  			} else {
  				modifier = "default";
  			}  			
  		}
		return modifier;
	}	
	
}


PARSER_END(JavaWrapper)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n" {JavaWrapper.ln ++;}
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < STRICTFP: "strictfp" >
// added by Andrea Gini
| < ASSERT: "assert" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

String CompilationUnit() :
{ String result, s;}
{
  { packageName = ""; imports = ""; }
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  {imports += "nil";}
  { result = "noClass";}
  ( s = TypeDeclaration() {result = "__(" + result + "," + s + ")";} )*
  <EOF>
  {return result;}
}

void PackageDeclaration() :
{String s;}
{
  "package" s = Name() {packageName = s;} ";"
}

void ImportDeclaration() :
{ String s;}
{
  "import" s = Name() {imports += s + " ; ";} [ "." "*" ] ";"
}

String TypeDeclaration() :
{ String result;}
{
  LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp" )* "class" )
  result = ClassDeclaration() {return result;}
|
  result = InterfaceDeclaration() {return result;}
|
  (";" {return ";" ;})
}


/*
 * Declaration syntax follows.
 */

String ClassDeclaration() :
{  Token t; String result, s;}
{
  {result = "_class_imports_extends_implements__(";
   t = getToken(1); }
  ( "abstract" | "final" | "public" | "strictfp")*
  { result += addTokens(t) + ","; }
  s = UnmodifiedClassDeclaration()
  {result += s + ")"; return result;}
}

String UnmodifiedClassDeclaration() :
{ Token t; String result, s, s2;}
{
  "class"
  t=<IDENTIFIER> {result = (packageName.length() > 0 ? packageName + " . " : "") + "t('" + t.image + "), " + imports + ", "; classes.add(t.image); s = "";} 
  [ "extends" s = Name() ] {if (s.length()==0) s = "Object"; result += s + ","; s = "";}
  [ "implements" s2 = NameList() {if (s.length() == 0) s = s2; else s = "_`,_(" + s + "," + s2 + ")";} ]
  {if (s.length()==0) s = "none"; result += s + ",";}
  s = ClassBody() {result += s; return result;}
}

String ClassBody() :
{String result, s, s2;}
{
  {result= " `{_`}("; s = "noMember";} "{" ( s2 = ClassBodyDeclaration() {s = "__(" + s + "," + s2 + ")";} )* "}" {result += s + ")"; return result;}
}

String NestedClassDeclaration() :
{ Token t; String result, s; }
{
  {result = "_;(_class_extends_implements__(";
   t = getToken(1); }
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")*
  { s = addTokens(t); result += s + ",";}
  s = UnmodifiedClassDeclaration()
  {result += s + "))"; return result;}
}

/* Modified by Andrea Gini 2 
 * According rules ClassBody and ClassBodyDeclaration
 * in the Java Language Specification,
 * semi-colons can be duplicated.
 * Source : http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html
 */ 

String ClassBodyDeclaration() :
{ String result;}
{
(
  LOOKAHEAD(2)
  result = Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  result = NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  result = NestedInterfaceDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  result = ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  result = MethodDeclaration()
|
  result = FieldDeclaration()
| (            // added by Andrea Gini2
  ";"         // added by Andrea Gini2
  {result = ";";} )
) {return result;}
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  ResultType() <IDENTIFIER> "("
}

String InterfaceDeclaration() :
{ Token t; String result, s;}
{
  {result = "_interface_imports_extends__(";
   t = getToken(1); }
  ( "abstract" | "public" | "strictfp")*
  { result += addTokens(t) + ","; }
  s = UnmodifiedInterfaceDeclaration()
  {result += s + ")"; return result;}
}

String NestedInterfaceDeclaration() :
{ Token t; String result, s;}
{
  {result = "_;(_interface_extends__(";
   t = getToken(1); }
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")*
  {result += addTokens(t) + ",";}
  s = UnmodifiedInterfaceDeclaration()
  {result += s + "))"; return result;}
}

String UnmodifiedInterfaceDeclaration() :
{ Token t; String result, s, s2;}
{
  "interface"
  t=<IDENTIFIER> {result = (packageName.length() > 0 ? packageName + "." : "") + "'t(" + t.image + "), " + imports; classes.add(t.image); s = "";} 
  [ "extends" s = NameList() ]
  {if (s.length() == 0) s = "none"; result += s + ", `{_`}("; s = "noMember";}
  "{" ( s2 = InterfaceMemberDeclaration() {s = "__(" + s + "," + s2 + ")";} )* "}" {result += s + "))";}
  {return result;}
}
/* Modified by Andrea Gini 2 
 * According to rules InterfaceBody and InterfaceBodyDeclaration
 * in the Java Language Specification,
 * semi-colons can be duplicated.
 * Source : http://java.sun.com/docs/books/jls/second_edition/html/syntax.doc.html
 */ 
String InterfaceMemberDeclaration() :
{String result;}
{
(
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  result = NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  result = NestedInterfaceDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  result = MethodDeclaration()
|
  result = FieldDeclaration()
| (            // added by Andrea Gini2
  ";"         // added by Andrea Gini2
  { result = ";"; } )
) {return result;}
}

String FieldDeclaration() :
{ Token t; String result, s, s2;}
{
  {result = "__;(";   t = getToken(1); }
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  { result += addTokens(t) + ", __("; }
  s = Type() {result += s + ",";} s = VariableDeclarator() ( "," s2 = VariableDeclarator() {s = "_`,_(" + s + "," + s2 + ")";})* 
  {result += s + "))";} ";"
  {return result;}
}

String VariableDeclarator() :
{String result, s;}
{
  result = VariableDeclaratorId() [ "=" s = VariableInitializer() {result = "_=_(" + result + "," + s + ")";} ]
  {return result;}
}

String VariableDeclaratorId() :
{ Token t; String result;}
{
  t=<IDENTIFIER> { result = "d('" + t.image + ")"; } ( "[" "]" { result = "_`[`](" + result + ")"; } )*
  {return result;}
}

String VariableInitializer() :
{String result;}
{
(
  result = ArrayInitializer()
|
  result = Expression()
) {return result;}
}

String ArrayInitializer() :
{String result, s, s2;}
{
  { result = "{}"; }
  "{" [ s = VariableInitializer() {result = "`{_`}(";} ( LOOKAHEAD(2) "," s2 = VariableInitializer() {s = "_`,_(" + s + "," + s2 + ")";} )* {result += s + ")";} ] [ "," ] "}" 
  {return result;}
}

String MethodDeclaration() :
{ Token t; String result, s;}
{
  { result = "___`(_`)__("; t = getToken(1); }
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  { result += addTokens(t) + ","; }
  s = ResultType() {result += s + ",";} s = MethodDeclarator() {result += s + ",throws("; s = "noType";} 
  [ "throws" s = NameList() ] {result += s + "),";}
  ( s = Block() {result += s + ")";} | (";") {result += ";";} )
  {return result;}
}

/** Note: for compatability For compatibility with older versions of the Java platform, 
*** a declaration form for a method that returns an array is allowed to place 
*** (some or all of) the empty bracket pairs that form the declaration of the array type 
*** after the parameter list. This is supported by the obsolescent production:
*** MethodDeclarator:	MethodDeclarator [ ]
*** but should not be used in new code. 
*** Feng: I don't support this yet!!!!
**/

String MethodDeclarator() :
{ Token t; String result, s;}
{

  t=<IDENTIFIER> {result = "'" + t.image + ","; } 
  s = FormalParameters() {result += s;} ( "[" "]" )*
  {return result;}
}

String FormalParameters() :
{String result, s, s2;}
{
  {result = ""; s = "noPara";} "(" [ s = FormalParameter() ( "," s2 = FormalParameter() {s = "_`,_(" + s + "," + s2 + ")";} )* ] ")" {result += s;}
  {return result;}
}

/** Feng: the "final" modifier is discarded since any violation should be denied by the compiler.
**/
String FormalParameter() :
{String result, s;}
{
  [ "final" ] {result = "__(";} s = Type() {result += s + ",";} s = VariableDeclaratorId() {result += s + ")"; return result;}
}

String ConstructorDeclaration() :
{ Token t; String result, s, s2;}
{
  { result = "__`(_`)__("; t = getToken(1); }
  [ "public" | "protected" | "private" ]
  { result += addTokens(t) + ","; }
  t=<IDENTIFIER> {result += "t('" + t.image + "),";} s = FormalParameters() {result += s + ",throws("; s = "noType";} 
  [ "throws" s = NameList() ] {result += s + "), `{_`}("; s = "nop";}
  "{" 
    [ LOOKAHEAD(ExplicitConstructorInvocation()) s = ExplicitConstructorInvocation() ]
    ( s2 = BlockStatement() {s = "__(" + s + "," + s2 + ")";} )*
  "}" 
  {result += s + "))"; return result;}
}

String ExplicitConstructorInvocation() :
{ String result, s; }
{
(	
  LOOKAHEAD("this" Arguments() ";")
  {result = "this_;(";}
  "this" s = Arguments() ";"  {result += s + ")";}
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] 
  {result = "super_;(";}
  "super" s = Arguments() ";" {result += s + ")";}
) {return result;}
}

String Initializer() :
{String result, s;}
{ 
  {result = "init(";}
  [ "static" {result = "static(";}] s = Block() {result += s + ")"; return result;}
}


/*
 * Type, name and expression syntax follows.
 */

String Type() :
{String result;}
{
  ( result = PrimitiveType() | result = Name() ) ( "[" "]" {result = "_`[`](" + result + ")";} )* 
  {return result;}
}

String PrimitiveType() :
{ Token t; }
{
(  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"
  ) { t = getToken(0); return t.image;} 
}

String ResultType() :
{String result;}
{
  "void" {return "void";}
|
  result = Type() {return result;}
}

String Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{ Token t; String str = "";}
{
  t=<IDENTIFIER> 
  {
  	str = "t('" + t.image + ")";
  }
  ( LOOKAHEAD(2) "." t=<IDENTIFIER> {str += " . t('" + t.image + ")";}
  )*
  {return str;}
}

String NameList() :
{String result, s;}
{
  result = Name()
  ( "," s = Name() {result = "_`,_(" + result + "," + s + ")";} )*
  {return result;}
}


/*
 * Expression syntax follows.
 */

String Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{String result, s;}
{
  result = ConditionalExpression()
  [
    s = AssignmentOperator() {result = "_" + s + "_(" + result + ",";} s = Expression() {result += s + ")";}
  ]
  {return result;}
}

String AssignmentOperator() :
{ Token t; }
{
  ("=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=")
  { t = getToken(0); return t.image;}
}

String ConditionalExpression() :
{String result, s;}
{
  result = ConditionalOrExpression() 
  [ "?" {result = "_?_:_(" + result + ",";} s = Expression() {result += s + ",";} ":" s  = ConditionalExpression() {result += s + ")";} ]
  {return result;}
}

String ConditionalOrExpression() :
{String result, s;}
{
  result = ConditionalAndExpression() ( "||" s = ConditionalAndExpression() {result = "_||_(" + result + "," + s + ")";} )*
  {return result;}
}

String ConditionalAndExpression() :
{String result, s;}
{
  result = InclusiveOrExpression() ( "&&" s = InclusiveOrExpression() {result = "_&&_(" + result + "," + s + ")";} )*
  {return result;}
}

String InclusiveOrExpression() :
{String result, s;}
{
  result = ExclusiveOrExpression() ( "|" s = ExclusiveOrExpression() {result = "_|_(" + result + "," + s + ")";} )*
  {return result;}
}

String ExclusiveOrExpression() :
{String result, s;}
{
  result = AndExpression() ( "^" s = AndExpression() {result = "_^_(" + result + "," + s + ")";} )*
  {return result;}
}

String AndExpression() :
{String result, s;}
{
  result = EqualityExpression() ( "&" s = EqualityExpression() {result = "_&_(" + result + "," + s + ")";} )*
  {return result;}
}

String EqualityExpression() :
{String result, s;}
{
  result = InstanceOfExpression() ( ( "==" {result = "_==_(" + result + ",";} | "!=" {result = "_!=_(" + result + ",";}) s = InstanceOfExpression() {result += s + ")";} )*
  {return result;}
}

String InstanceOfExpression() :
{String result, s;}
{
  result = RelationalExpression() [ "instanceof" s = Type() {result = "instanceof(" + result + "," + s + ")";} ]
  {return result;}
}

String RelationalExpression() :
{ Token t; String result, s;}
{
  result = ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) { t = getToken(0); result = "_" + t.image + "_(" + result + ",";} s = ShiftExpression() {result += s + ")";} )*
  {return result;}
}

String ShiftExpression() :
{ Token t; String result, s;}
{
  result = AdditiveExpression() ( ( "<<" | ">>" | ">>>" ) { t = getToken(0); result = "_" + t.image + "_(" + result + ",";} s = AdditiveExpression() {result += s + ")";})*
  {return result;}
}

String AdditiveExpression() :
{ Token t; String result, s;}
{
  result = MultiplicativeExpression() ( ( "+" | "-" ) { t = getToken(0); result = "_" + t.image + "_(" + result + ",";} s = MultiplicativeExpression() {result += s + ")";})*
  {return result;}
}

String MultiplicativeExpression() :
{ Token t; String result, s;}
{
  result = UnaryExpression() ( ( "*" | "/" | "%" ) { t = getToken(0); result = "_" + t.image + "_(" + result + ",";} s = UnaryExpression() {result += s + ")";})*
  {return result;}
}

String UnaryExpression() :
{ Token t; String result, s;}
{
(	
  ( "+" | "-" ) { t = getToken(0); result = t.image + "_(";} s = UnaryExpression() {result += s + ")";}
|
  result = PreIncrementExpression()
|
  result = PreDecrementExpression()
|
  result = UnaryExpressionNotPlusMinus()
) {return result;}  
}

String PreIncrementExpression() :
{String result;}
{
  "++" result = PrimaryExpression() {result = "++_(" + result + ")"; return result;}
}

String PreDecrementExpression() :
{String result;}
{
  "--" result = PrimaryExpression() {result = "--_(" + result + ")"; return result;}
}

String UnaryExpressionNotPlusMinus() :
{ Token t; String result, s;}
{
(	
  ( "~" | "!" ) { t = getToken(0); result = t.image + "_(";} s = UnaryExpression() {result += s + ")";}
|
  LOOKAHEAD( CastLookahead() )
  result = CastExpression()
|
  result = PostfixExpression()
) {return result;}  
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
(  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
 ) 
}

String PostfixExpression() :
{String result;}
{
  result = PrimaryExpression() [ "++" {result = "_++(" + result + ")";} | "--" {result = "_--(" + result + ")";} ]
  {return result;}
}

String CastExpression() :
{String result, s;}
{
{result = "`{_`}_(";}
(
  LOOKAHEAD("(" PrimitiveType())
  "(" s = Type() ")" {result += s + ",";} s = UnaryExpression() {result += s + ")";}
|
  "(" s = Type() ")" {result += s + ",";} s = UnaryExpressionNotPlusMinus() {result += s + ")";}
) {return result;}
}

String PrimaryExpression() :
{String result;}
{
  result = PrimaryPrefix() ( LOOKAHEAD(2) result = PrimarySuffix(result) )*
  {return result;}
}

String PrimaryPrefix() :
{ Token t; String result = "";}
{
(	
  result = Literal()
|
  "this" {result = "this";}
|
  "super" "." t=<IDENTIFIER> {result = "_._(super,'" + t.image + ")";}
|
  "(" result = Expression() ")" {result = "(" + result + ")";}
|
  result = AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  result = ResultType() "." "class" {result = "_._(" + result + ",class)";}
|
  LOOKAHEAD(2)
  t=<IDENTIFIER> result = Arguments() {result = "_<_>('" + t.image + "," + result + ")";}
|
  t=<IDENTIFIER> // changed by Feng Chen
  {  	
  	for (int i = 0; i < classes.size() ; i++){
  		if (t.image.compareTo((String)classes.get(i)) == 0)
  			result = "t('" + t.image + ")";
  	}  	
  	if (result.length() == 0)
	  	result = "'" + t.image;
  }
) {return result;}  
}

/* Add "." "super" to be compatible with Java 1.2, 
 * Modified by Marco Savard
 */ 
String PrimarySuffix(String prefix) :
{ Token t; String result;}
{
(	
  LOOKAHEAD(2)
  "." "this" {result = "_._(" + prefix + "," + "this)";} 
|
  LOOKAHEAD(2)
  "." "super"  {result = "_._(" + prefix + "," + "super)";}
|
  LOOKAHEAD(2)
  "." result = AllocationExpression() {result = "_._(" + prefix + "," + result + ")";}
|
  "[" result = Expression() "]" {result = "_`[_`](" + prefix + "," + result + ")";}
|
  "." ( LOOKAHEAD(2) 
        t=<IDENTIFIER> result = Arguments() {result = "_._(" + prefix + ",_<_>('" + t.image + "," + result + "))";} 
      | t=<IDENTIFIER> {result = "_._(" + prefix + ",'" + t.image + ")";}) //changed by Feng Chen
) {return result;}  
}

String Literal() :
{ Token t; String result;}
{
(	
  t=<INTEGER_LITERAL> { 
  	result = "i(" + Long.decode(t.image).toString() + ")";
  }
|
  t=<FLOATING_POINT_LITERAL> {result = "f(" + t + ")";}
|
  t=<CHARACTER_LITERAL> {result = "s(\"" + t.image + "\")";}
|
  t=<STRING_LITERAL> {result = "s(" + t + ")";}
|
  result = BooleanLiteral()
|
  result = NullLiteral()
) {return result;}
}

String BooleanLiteral() :
{}
{
  "true" {return "b(true)";}
|
  "false" {return "b(false)";}
}

String NullLiteral() :
{}
{
  "null" {return "null";}
}

String Arguments() :
{String result;}
{
  {result = "noExp";}	
  "(" [ result = ArgumentList() ] ")" 
  {return result;}
}

String ArgumentList() :
{String result, s;}
{
  result = Expression() ( "," s = Expression() {result = "_`,_(" + result + "," + s + ")";} )*
  {return result;}
}

String AllocationExpression() :
{String result, s, s2;} 
{
(	
  LOOKAHEAD(2)
  "new" {result = "new__(";} s = PrimitiveType() {result += s + ",";} s = ArrayDimsAndInits() {result += s + ")";}
|
  "new" result = Name() 
    (
      s = ArrayDimsAndInits() {result = "new__(" + result + "," + s + ")";}
    |
      s = Arguments() {result = "new_<_>(" + result + "," + s + ")";} [ s2 = ClassBody() {result = "new_<_>_(" + result + "," + s + "," + s2 + ")";}] 
    )
) {return result;}    
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
String ArrayDimsAndInits() :
{String result = "", s;}
{
(	
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" s = Expression() "]" {
  	s = "`[_`](" + s + ")";
  	if (result.length() == 0) 
  	   result = s;
  	else
  	   result = "__(" + result + "," + s + ")";
  } )+ 
  ( LOOKAHEAD(2) "[" "]" {result = "_`[`](" + result + ")";} )*
|
  ( "[" "]" {
  	if (result.length() == 0)
  	   result = "`[`]";
  	else
  	   result = "_`[`](" + result + ")";
  } )+ s = ArrayInitializer() {result = "__(" + result + "," + s + ")";}
) {return result;}  
}


/*
 * Statement syntax follows.
 */

String Statement() :
{String result;}
{
(	
  LOOKAHEAD(2)
  result = LabeledStatement()
|
  result = Block()
|
  result = EmptyStatement()
|
  result = StatementExpression() ";" {result = "_;(" + result + ")";}
|
  result = SwitchStatement()
|
  result = IfStatement()
|
  result = WhileStatement()
|
  result = DoStatement()
|
  result = ForStatement()
|
  result = BreakStatement()
|
  result = ContinueStatement()
|
  result = ReturnStatement()
|
  result = ThrowStatement()
|
  result = SynchronizedStatement()
|
  result = TryStatement()
// added by Andrea Gini
|
  result = AssertStatement()
) {return "_@_(" + Integer.toString(ln) + "," + result + ")";}  
}

String LabeledStatement() :
{ Token t; String result;}
{
  t=<IDENTIFIER> ":" result = Statement() {result = "_:_('" + t.image + "," + result + ")"; return result;}
}

String Block() :
{String result, s, s2;}
{
  {result = "`{_`}("; s = "";}
  "{" ( s2 = BlockStatement() {if (s.length() == 0) s = s2; else s = "__(" + s + "," + s2 + ")";})* "}" 
  {if (s.length() == 0) s = "nop"; result += s + ")"; return result;}
}

String BlockStatement() :
{String result;}
{
(	
  LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  result = LocalVariableDeclaration() ";" {result = "_;(" + result + ")";}
|
  result = Statement()
|
  result = UnmodifiedClassDeclaration()
|
  result = UnmodifiedInterfaceDeclaration()
) {return result;}  
}

String LocalVariableDeclaration() :
{String result, s, s2;}
{
  {result = "__(";}
  [ "final" ] s = Type() {result += s + ",";} s = VariableDeclarator() ( "," s2 = VariableDeclarator() {s = "_`,_(" + s + "," + s2 + ")";} )* {result += s + ")"; return result;}
}

String EmptyStatement() :
{}
{
  ";" {return ";";}
}

String StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{String result, s;}
{
(	
  result = PreIncrementExpression()
|
  result = PreDecrementExpression()
|
  result = PrimaryExpression()
  [
    "++" {result = "_++(" + result + ")";}
  |
    "--" {result = "_--(" + result + ")";}
  |
    s = AssignmentOperator() {result = "_" + s + "_(" + result + ",";} s = Expression() {result += s + ")";}
  ]
) {return result;}  
}

String SwitchStatement() :
{String result, s, s2 = "", s3;}
{
  {result = "switch_`{_`}(";}
  "switch" "(" s = Expression() ")" {result += s + ",";} "{" 
    ( s = SwitchLabel() (s3 = BlockStatement() {if (s2.length() == 0) s2 = s3; else s2 = "__(" + s2 + "," + s3 + ")";})* 
    {s = "__(" + s + "," + s2 + ")";} )*
  "}" {result += s + ")"; return result;}
}

String SwitchLabel() :
{String result;}
{
  "case" result = Expression() ":" {return "case_:(" + result + ")";}
|
  "default" ":" {return "default:";}
}

String IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{String result, s;}
{
  {result = "if__else_fi(";}
  "if" "(" s = Expression() ")" {result += s + ",";} s = Statement() {result += s + ","; s = "nop";} [ LOOKAHEAD(1) "else" s = Statement() ] 
  {result += s + ")"; return result;}
}

String WhileStatement() :
{String result, s;}
{
  {result = "while__(";}
  "while" "(" s = Expression() ")" {result += s + ",";} s = Statement()
  {result += s + ")"; return result;}
}

String DoStatement() :
{String result, s;}
{
  {result = "do_while_;(";}
  "do" s = Statement() {result += s + ",";} "while" "(" s = Expression() ")" ";" 
  {result += s + ")"; return result;}
}

String ForStatement() :
{String result, s;}
{
  {result = "for`(_;_;_`)_("; s = "noExp";}
  "for" "(" [ s = ForInit() ] {result += s + ","; s = "noExp";} ";" [ s = Expression() ] {result += s + ","; s = "noExp";} ";" [ s = ForUpdate() ] ")" {result += s + ","; } s = Statement()
  {result += s + ")"; return result;}
}

String ForInit() :
{String result;}
{
(  
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  result = LocalVariableDeclaration()
|
  result = StatementExpressionList()
) {return result;}  
}

String StatementExpressionList() :
{String result, s;}
{
  result = StatementExpression() ( "," s = StatementExpression() {result = "_`,_(" + result + "," + s + ")";} )*
  {return result;}
}

String ForUpdate() :
{String result;}
{
  result = StatementExpressionList() {return result;}
}

String BreakStatement() :
{ Token t; String result;}
{
  {result = "break;";}
  "break" [ t=<IDENTIFIER> {result = "break_;('" + t.image + ")";} ] ";" {return result;}
}

String ContinueStatement() :
{ Token t; String result;}
{
  {result = "continue;";}
  "continue" [ t=<IDENTIFIER> {result = "continue_;('" + t.image + ")";} ] ";" 
  {return result;}
}

String ReturnStatement() :
{String result;}
{
  {result = "return;";}
  "return" [ result = Expression() {result = "return_;(" + result + ")";}] ";"
  {return result;}
}

String ThrowStatement() :
{String result;}
{
  "throw" result = Expression() ";" {return "throw_;(" + result + ")";}
}

String SynchronizedStatement() :
{String result, s;}
{
  "synchronized" "(" result = Expression() ")" s = Block() {return "synchronized__(" + result + "," + s + ")";}
}

String TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{String block, result, s, s2, s3;}
{
  "try" block = Block() {s = "";}
  ( "catch" "(" s2 = FormalParameter() ")" s3 = Block() {
      if (s.length() == 0)
         s = "catch`(_`)_(" + s2 + "," + s3 + ")";
      else
         s = "__(" + s + "," + "catch`(_`)_(" + s2 + "," + s3 + "))";
  } )*
  {if (s.length() == 0) s = "noCatch"; result = "try__(" + block + "," + s + ")";}
  [ "finally" s2 = Block() {result = "try__finally_(" + block + "," + s + "," + s2 + ")";}]
  {return result;}
}

// added by Andrea Gini
String AssertStatement() :
{String result, s;}
{
   "assert" s = Expression() {result = "assert_;(" + s + ")";} [ ":" result = Expression() {result = "assert_:_;(" + s + "," + result + ")";}] ";" 
   {return result;}
}
